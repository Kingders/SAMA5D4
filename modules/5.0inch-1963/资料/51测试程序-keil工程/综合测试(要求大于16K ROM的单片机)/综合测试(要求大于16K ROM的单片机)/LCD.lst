C51 COMPILER V9.01   LCD                                                                   02/22/2014 16:01:18 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LCD\LCD.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\LCD.lst) OBJECT(LCD.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          #include <font\font.h>
   4          #include <sys\sys.h>
   5          #include <lcd\lcd.h>
   6          /* http://ttmcu.taobao.com 雨亭电子
   7          代码测试环境:JME-2核心板+1T指令周期的STC单片机（51内核STC12LE5A60S2)+33M晶振      单片机工作电压3.3V
   8          程序默认IO连接方式：
   9          控制线：RS-P3^5;    WR-P3^6;   RD-P3^7;   CS-P1^0;   REST-P1^2;
  10          数据线: DB0-DB7依次连接P0^0-P0^7;  DB8-DB15依次连接P2^0-P2^7;（8位模式下DB0-DB7可以不连接）
  11          触摸功能连接方式：(不使用触摸可不连接)
  12          D_CLK-P1^7;  D_CS-P1^4;  D_DIN-P3^0;  D_OUT-P3^1;  D_PENIRQ-P3^4;
  13          */
  14          u16 BACK_COLOR, POINT_COLOR;   //背景色，画笔色
  15          
  16          u16  HDP=799;
  17          u16  HT=928;
  18          u16  HPS=46;
  19          u16  LPS=15;
  20          u8   HPW=48;
  21          
  22          u16  VDP=479;
  23          u16  VT=525;
  24          u16  VPS=16;
  25          u16  FPS=8;
  26          u8   VPW=16;
  27          
  28          
  29          #ifdef  Bus_16    //条件编译-16位数据模式   
  30          void LCD_Writ_Bus(char VH,char VL)   //并行数据写入函数
  31          {
  32   1          LCD_DataPortH=VH;   
  33   1              LCD_DataPortL=VL;               
  34   1              LCD_WR=0;
  35   1              LCD_WR=1; 
  36   1      }
  37          #else                   //条件编译-8位数据模式 
              void LCD_Writ_Bus(char VH,char VL)   //并行数据写入函数
              {       
                  LCD_DataPortH=VH;   
                      LCD_WR=0;
                      LCD_WR=1;
                      LCD_DataPortH=VL;               
                      LCD_WR=0;
                      LCD_WR=1;
              }
              #endif
  48          void LCD_WR_DATA8(char VH,char VL) //发送数据-8位参数
  49          {
  50   1          LCD_RS=1;
  51   1              LCD_Writ_Bus(VH,VL);
  52   1      }  
  53           void LCD_WR_DATA(int da)
  54          {
  55   1          LCD_RS=1;
C51 COMPILER V9.01   LCD                                                                   02/22/2014 16:01:18 PAGE 2   

  56   1              LCD_Writ_Bus(da>>8,da);
  57   1      }         
  58          void LCD_WR_REG(int da)  
  59          {       
  60   1          LCD_RS=0;
  61   1              LCD_Writ_Bus(da>>8,da);
  62   1      }
  63           void LCD_WR_REG_DATA(int reg,int da)
  64          {
  65   1          LCD_WR_REG(reg);
  66   1              LCD_WR_DATA(da);
  67   1      }
  68          void Address_set(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)
  69          { 
  70   1              LCD_WR_REG(0x002A);     
  71   1              LCD_WR_DATA(x1>>8);         
  72   1              LCD_WR_DATA(x1&0x00ff);
  73   1              LCD_WR_DATA(x2>>8);         
  74   1              LCD_WR_DATA(x2&0x00ff);
  75   1          LCD_WR_REG(0x002b); 
  76   1              LCD_WR_DATA(y1>>8);         
  77   1              LCD_WR_DATA(y1&0x00ff);
  78   1              LCD_WR_DATA(y2>>8);         
  79   1              LCD_WR_DATA(y2&0x00ff);
  80   1              LCD_WR_REG(0x002c);                                                                                      
  81   1      }
  82          void Lcd_Init(void)
  83          {
  84   1      
  85   1      //调用一次这些函数，免得编译的时候提示警告
  86   1              LCD_CS =1;
  87   1              if(LCD_CS==0)
  88   1              {
  89   2                 LCD_WR_REG_DATA(0,0);
  90   2                 LCD_ShowString(0,0," ");
  91   2                 LCD_ShowNum(0,0,0,0);
  92   2                 LCD_Show2Num(0,0,0,0);
  93   2                 LCD_DrawPoint_big(0,0);
  94   2                 LCD_DrawRectangle(0,0,0,0);
  95   2                 Draw_Circle(0,0,0);
  96   2          }
  97   1              LCD_RD=1;
  98   1              LCD_WR=1;
  99   1              LCD_REST=0;
 100   1              delayms(20);    //此处保证要有5ms以上才能保证复位稳定,推荐20ms
 101   1              LCD_REST=1;     
 102   1              delayms(20);    //此处保证要有5ms以上才能保证复位稳定,推荐20ms          
 103   1              LCD_CS =0;  //打开片选使能
 104   1      
 105   1              LCD_WR_REG(0x00E2);     //PLL multiplier, set PLL clock to 120M
 106   1              LCD_WR_DATA(0x0023);        //N=0x36 for 6.5M, 0x23 for 10M crystal
 107   1              LCD_WR_DATA(0x0002);
 108   1              LCD_WR_DATA(0x0004);
 109   1              LCD_WR_REG(0x00E0);  // PLL enable
 110   1              LCD_WR_DATA(0x0001);
 111   1              delayms(1);
 112   1              LCD_WR_REG(0x00E0);
 113   1              LCD_WR_DATA(0x0003);
 114   1              delayms(5);
 115   1              LCD_WR_REG(0x0001);  // software reset
 116   1              delayms(5);
 117   1              LCD_WR_REG(0x00E6);     //PLL setting for PCLK, depends on resolution
C51 COMPILER V9.01   LCD                                                                   02/22/2014 16:01:18 PAGE 3   

 118   1              LCD_WR_DATA(0x0003);
 119   1              LCD_WR_DATA(0x00ff);
 120   1              LCD_WR_DATA(0x00ff);
 121   1      
 122   1              LCD_WR_REG(0x00B0);     //LCD SPECIFICATION
 123   1              LCD_WR_DATA(0x0027);
 124   1              LCD_WR_DATA(0x0000);
 125   1              LCD_WR_DATA((HDP>>8)&0X00FF);  //Set HDP
 126   1              LCD_WR_DATA(HDP&0X00FF);
 127   1          LCD_WR_DATA((VDP>>8)&0X00FF);  //Set VDP
 128   1              LCD_WR_DATA(VDP&0X00FF);
 129   1          LCD_WR_DATA(0x0000);
 130   1      
 131   1              LCD_WR_REG(0x00B4);     //HSYNC
 132   1              LCD_WR_DATA((HT>>8)&0X00FF);  //Set HT
 133   1              LCD_WR_DATA(HT&0X00FF);
 134   1              LCD_WR_DATA((HPS>>8)&0X00FF);  //Set HPS
 135   1              LCD_WR_DATA(HPS&0X00FF);
 136   1              LCD_WR_DATA(HPW);                          //Set HPW
 137   1              LCD_WR_DATA((LPS>>8)&0X00FF);  //Set HPS
 138   1              LCD_WR_DATA(LPS&0X00FF);
 139   1              LCD_WR_DATA(0x0000);
 140   1      
 141   1              LCD_WR_REG(0x00B6);     //VSYNC
 142   1              LCD_WR_DATA((VT>>8)&0X00FF);   //Set VT
 143   1              LCD_WR_DATA(VT&0X00FF);
 144   1              LCD_WR_DATA((VPS>>8)&0X00FF);  //Set VPS
 145   1              LCD_WR_DATA(VPS&0X00FF);
 146   1              LCD_WR_DATA(VPW);                          //Set VPW
 147   1              LCD_WR_DATA((FPS>>8)&0X00FF);  //Set FPS
 148   1              LCD_WR_DATA(FPS&0X00FF);
 149   1      
 150   1              LCD_WR_REG(0x00BA);
 151   1              LCD_WR_DATA(0x000F);    //GPIO[3:0] out 1
 152   1      
 153   1              LCD_WR_REG(0x00B8);
 154   1              LCD_WR_DATA(0x0007);    //GPIO3=input, GPIO[2:0]=output
 155   1              LCD_WR_DATA(0x0001);    //GPIO0 normal
 156   1      
 157   1              LCD_WR_REG(0x0036); //rotation
 158   1              LCD_WR_DATA(0x0000);
 159   1      
 160   1              LCD_WR_REG(0x00F0); //pixel data interface
 161   1              LCD_WR_DATA(0x0003);
 162   1      
 163   1      
 164   1              delayms(5);
 165   1      
 166   1              LCD_WR_REG(0x0029); //display on
 167   1      
 168   1      
 169   1      
 170   1              LCD_WR_REG(0x00d0); 
 171   1              LCD_WR_DATA(0x000d);
 172   1      
 173   1      
 174   1      }
 175          //清屏函数
 176          //Color:要清屏的填充色
 177          void LCD_Clear(u16 Color)
 178          {
 179   1              u8 VH,VL;
C51 COMPILER V9.01   LCD                                                                   02/22/2014 16:01:18 PAGE 4   

 180   1              u16 i,j;
 181   1              VH=Color>>8;
 182   1              VL=Color;       
 183   1              Address_set(0,0,LCD_W-1,LCD_H-1);
 184   1          for(i=0;i<LCD_W;i++)
 185   1               {
 186   2                for (j=0;j<LCD_H;j++)
 187   2                      {
 188   3                       LCD_WR_DATA8(VH,VL);
 189   3                  }
 190   2      
 191   2                }
 192   1      }
 193          //在指定位置显示一个汉字(32*33大小)
 194          //dcolor为内容颜色，gbcolor为背静颜色
 195          void showhanzi(unsigned int x,unsigned int y,unsigned char index)       
 196          {  
 197   1              unsigned char i,j;
 198   1              unsigned char *temp=hanzi;    
 199   1          Address_set(x,y,x+31,y+31); //设置区域      
 200   1              temp+=index*128;        
 201   1              for(j=0;j<128;j++)
 202   1              {
 203   2                      for(i=0;i<8;i++)
 204   2                      {                    
 205   3                              if((*temp&(1<<i))!=0)
 206   3                              {
 207   4                                      LCD_WR_DATA(POINT_COLOR);
 208   4                              } 
 209   3                              else
 210   3                              {
 211   4                                      LCD_WR_DATA(BACK_COLOR);
 212   4                              }   
 213   3                      }
 214   2                      temp++;
 215   2               }
 216   1      }
 217          //画点
 218          //POINT_COLOR:此点的颜色
 219          void LCD_DrawPoint(u16 x,u16 y)
 220          {
 221   1              Address_set(x,y,x,y);//设置光标位置 
 222   1              LCD_WR_DATA(POINT_COLOR);           
 223   1      }        
 224          //画一个大点
 225          //POINT_COLOR:此点的颜色
 226          void LCD_DrawPoint_big(u16 x,u16 y)
 227          {
 228   1              LCD_Fill(x-1,y-1,x+1,y+1,POINT_COLOR);
 229   1      } 
 230          //在指定区域内填充指定颜色
 231          //区域大小:
 232          //  (xend-xsta)*(yend-ysta)
 233          void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
 234          {          
 235   1              u16 i,j; 
 236   1              Address_set(xsta,ysta,xend,yend);      //设置光标位置 
 237   1              for(i=ysta;i<=yend;i++)
 238   1              {                                                                                                                       
 239   2                      for(j=xsta;j<=xend;j++)LCD_WR_DATA(color);//设置光标位置            
 240   2              }                                                   
 241   1      }  
C51 COMPILER V9.01   LCD                                                                   02/22/2014 16:01:18 PAGE 5   

 242          //画线
 243          //x1,y1:起点坐标
 244          //x2,y2:终点坐标  
 245          void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
 246          {
 247   1              u16 t; 
 248   1              int xerr=0,yerr=0,delta_x,delta_y,distance; 
 249   1              int incx,incy,uRow,uCol; 
 250   1      
 251   1              delta_x=x2-x1; //计算坐标增量 
 252   1              delta_y=y2-y1; 
 253   1              uRow=x1; 
 254   1              uCol=y1; 
 255   1              if(delta_x>0)incx=1; //设置单步方向 
 256   1              else if(delta_x==0)incx=0;//垂直线 
 257   1              else {incx=-1;delta_x=-delta_x;} 
 258   1              if(delta_y>0)incy=1; 
 259   1              else if(delta_y==0)incy=0;//水平线 
 260   1              else{incy=-1;delta_y=-delta_y;} 
 261   1              if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
 262   1              else distance=delta_y; 
 263   1              for(t=0;t<=distance+1;t++ )//画线输出 
 264   1              {  
 265   2                      LCD_DrawPoint(uRow,uCol);//画点 
 266   2                      xerr+=delta_x ; 
 267   2                      yerr+=delta_y ; 
 268   2                      if(xerr>distance) 
 269   2                      { 
 270   3                              xerr-=distance; 
 271   3                              uRow+=incx; 
 272   3                      } 
 273   2                      if(yerr>distance) 
 274   2                      { 
 275   3                              yerr-=distance; 
 276   3                              uCol+=incy; 
 277   3                      } 
 278   2              }  
 279   1      }    
 280          //画矩形
 281          void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
 282          {
 283   1              LCD_DrawLine(x1,y1,x2,y1);
 284   1              LCD_DrawLine(x1,y1,x1,y2);
 285   1              LCD_DrawLine(x1,y2,x2,y2);
 286   1              LCD_DrawLine(x2,y1,x2,y2);
 287   1      }
 288          //在指定位置画一个指定大小的圆
 289          //(x,y):中心点
 290          //r    :半径
 291          void Draw_Circle(u16 x0,u16 y0,u8 r)
 292          {
 293   1              int a,b;
 294   1              int di;
 295   1              a=0;b=r;          
 296   1              di=3-(r<<1);             //判断下个点位置的标志
 297   1              while(a<=b)
 298   1              {
 299   2                      LCD_DrawPoint(x0-b,y0-a);             //3           
 300   2                      LCD_DrawPoint(x0+b,y0-a);             //0           
 301   2                      LCD_DrawPoint(x0-a,y0+b);             //1       
 302   2                      LCD_DrawPoint(x0-b,y0-a);             //7           
 303   2                      LCD_DrawPoint(x0-a,y0-b);             //2             
C51 COMPILER V9.01   LCD                                                                   02/22/2014 16:01:18 PAGE 6   

 304   2                      LCD_DrawPoint(x0+b,y0+a);             //4               
 305   2                      LCD_DrawPoint(x0+a,y0-b);             //5
 306   2                      LCD_DrawPoint(x0+a,y0+b);             //6 
 307   2                      LCD_DrawPoint(x0-b,y0+a);             
 308   2                      a++;
 309   2                      //使用Bresenham算法画圆     
 310   2                      if(di<0)di +=4*a+6;       
 311   2                      else
 312   2                      {
 313   3                              di+=10+4*(a-b);   
 314   3                              b--;
 315   3                      } 
 316   2                      LCD_DrawPoint(x0+a,y0+b);
 317   2              }
 318   1      } 
 319          //在指定位置显示一个字符
 320          
 321          //num:要显示的字符:" "--->"~"
 322          //mode:叠加方式(1)还是非叠加方式(0)
 323          //在指定位置显示一个字符
 324          
 325          //num:要显示的字符:" "--->"~"
 326          
 327          //mode:叠加方式(1)还是非叠加方式(0)
 328          void LCD_ShowChar(u16 x,u16 y,u8 num,u8 mode)
 329          {
 330   1          u8 temp;
 331   1          u8 pos,t;
 332   1              u16 x0=x;
 333   1              u16 colortemp=POINT_COLOR;      
 334   1          if(x>LCD_W-16||y>LCD_H-16)return;       
 335   1              //设置窗口                 
 336   1              num=num-' ';//得到偏移后的值
 337   1              Address_set(x,y,x+8-1,y+16-1);      //设置光标位置 
 338   1              if(!mode) //非叠加方式
 339   1              {
 340   2                      for(pos=0;pos<16;pos++)
 341   2                      { 
 342   3                              temp=asc2_1608[(u16)num*16+pos];                 //调用1608字体
 343   3                              for(t=0;t<8;t++)
 344   3                          {                 
 345   4                              if(temp&0x01)POINT_COLOR=colortemp;
 346   4                                      else POINT_COLOR=BACK_COLOR;
 347   4                                      LCD_WR_DATA(POINT_COLOR);       
 348   4                                      temp>>=1; 
 349   4                                      x++;
 350   4                          }
 351   3                              x=x0;
 352   3                              y++;
 353   3                      }       
 354   2              }else//叠加方式
 355   1              {
 356   2                      for(pos=0;pos<16;pos++)
 357   2                      {
 358   3                          temp=asc2_1608[(u16)num*16+pos];             //调用1608字体
 359   3                              for(t=0;t<8;t++)
 360   3                          {                 
 361   4                              if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//画一个点     
 362   4                              temp>>=1; 
 363   4                          }
 364   3                      }
 365   2              }
C51 COMPILER V9.01   LCD                                                                   02/22/2014 16:01:18 PAGE 7   

 366   1              POINT_COLOR=colortemp;                            
 367   1      }   
 368          //m^n函数
 369          u32 mypow(u8 m,u8 n)
 370          {
 371   1              u32 result=1;    
 372   1              while(n--)result*=m;    
 373   1              return result;
 374   1      }                        
 375          //显示2个数字
 376          //x,y :起点坐标  
 377          //len :数字的位数
 378          //color:颜色
 379          //num:数值(0~4294967295);       
 380          void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len)
 381          {               
 382   1              u8 t,temp;
 383   1              u8 enshow=0;
 384   1              num=(u16)num;
 385   1              for(t=0;t<len;t++)
 386   1              {
 387   2                      temp=(num/mypow(10,len-t-1))%10;
 388   2                      if(enshow==0&&t<(len-1))
 389   2                      {
 390   3                              if(temp==0)
 391   3                              {
 392   4                                      LCD_ShowChar(x+8*t,y,' ',0);
 393   4                                      continue;
 394   4                              }else enshow=1; 
 395   3                               
 396   3                      }
 397   2                      LCD_ShowChar(x+8*t,y,temp+48,0); 
 398   2              }
 399   1      } 
 400          //显示2个数字
 401          //x,y:起点坐标
 402          //num:数值(0~99);        
 403          void LCD_Show2Num(u16 x,u16 y,u16 num,u8 len)
 404          {               
 405   1              u8 t,temp;                                                 
 406   1              for(t=0;t<len;t++)
 407   1              {
 408   2                      temp=(num/mypow(10,len-t-1))%10;
 409   2                      LCD_ShowChar(x+8*t,y,temp+'0',0); 
 410   2              }
 411   1      } 
 412          //显示字符串
 413          //x,y:起点坐标  
 414          //*p:字符串起始地址
 415          //用16字体
 416          void LCD_ShowString(u16 x,u16 y,const u8 *p)
 417          {         
 418   1          while(*p!='\0')
 419   1          {       
 420   2              if(x>LCD_W-16){x=0;y+=16;}
 421   2              if(y>LCD_H-16){y=x=0;LCD_Clear(RED);}
 422   2              LCD_ShowChar(x,y,*p,0);
 423   2              x+=8;
 424   2              p++;
 425   2          }  
 426   1      }
 427          
C51 COMPILER V9.01   LCD                                                                   02/22/2014 16:01:18 PAGE 8   

 428          
 429          
 430          
 431          
 432          
 433          
 434          
 435          
 436          
 437          
 438          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3245    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =     22     125
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
